Git Workflows

1.	Create new repository on github.com

2.	Work on your own code in VS Studio

3.	Add your code to the new repository commands: 

a.	git init—initializes git in your project folder
b.	git status -u —lets you know what is staged for adding to repository
c.	git add file-name : add which files you want to commit to the “stage”
d.	git commit -m “commit text” : write a description of your commit
e.	git remote add origin https://github.com/wDushanin/repository-name.git 
add your staged files and commits to the repository
f.	git branch -m main : switches the branch to main
g.	git push -u origin main : pushes everything to github
h.	git push : to add any additional code, you only need to use the command git push

4.	New Branch and Pull Requests: 

a.	Make a new branch (from the proper project folder)
NOTE: checkout just moves you to a new branch
NOTE: the -b is the command you add to this to create a new branch 
git checkout -b new-branch-name
You should see the branch change in your terminal
b.	git status -u : see what is staged
c.	Work on your code in VS Code
d.	NOTE: Convention is to make one branch per ticket
e.	git diff : see what is different between former version and your new branch
f.	git add .  : add/stage your changes 
g.	git commit -m “commit text” : write a description of your commit
h.	git status -u : view what is staged to be added to repository
i.	git push -u origin new-branch-name : push your code to the repository on github
j.	You can now view the branch on github

5.	Merge Branches:

a.	On Github, click on “Compare and Pull Request”
b.	Use the Github UI to review differences and approve the request by clicking “Create Pull Request”
c.	(Github UI) You can now merge the pull request by clicking “Merge pull request”, but you should probably wait for others to review and make comments/aqpprove
d.	You can see what files are changed and what the changes are by click on the “files changed” tab.
e.	You can leave comments on the changes by hovering and pushing the ‘+’ button
f.	Click “finish your review” to submit your review
g.	Once approved click “merge” and delete your branch
h.	

6.	Cloning a Repository: 

a.	Make sure you are not in a folder with a git repository already initiated
b.	git clone https://repository-link.git
c.	Make a new branch and then push that branch (step 4)

7.	Pulling Updated Repository

a.	If not on main branch, move back to the main branch
git checkout main
b.	git pull
Note: you don’t have to add a link here because you already have git initiated in this folder.  Your computer is smart and already knows what to do to pull the repository from the remote to your computer. 
c.	If you aren’t sure if you are up to date with all changes in the repository, you can always run git pull to bring the most up to date code to your local computer.  Just make sure your working directory is clean (you don’t have any other commits) before you run the git pull 

8.	Dealing with Merge Conflicts
a.	Make sure the main and feature branch are up to date with git pull
NOTE: this means you run git pull feature-branch AND THEN git pull main
b.	While on the feature branch, merge the main branch into the feature branch with git merge main
NOTE: Git will tell you in the terminal that there are conflicts. 
c.	Resolve the conflicts in VSCode
d.	git status : you will see an unmerged path
e.	git add . : add the file to the staging area
f.	Commit the merge:
git commit -m “resolved merge conflict” 
g.	git status: you will see that you are ahead of “origin” by # commits
h.	git diff: you can see any changes
i.	Push the changes to the feature branch on the remote
git push
NOTE: You don’t have to use -u here because you are already on your feature branch
j.	Make sure the main and feature branch are up to date with git pull
k.	If all else fails, you can start over by running: 
git merge --abort 
and start over. 
